#!/bin/bash

set -e

OS="$(uname)"

if [ ! -d ~/.oh-my-zsh ]; then
  echo "oh-my-zsh not found. Installing oh-my-zsh..."
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
  echo "oh-my-zsh found. Skipping installation of oh-my-zsh..."
fi

if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]; then
  echo "zsh-autosuggestions not found. Installing zsh-autosuggestions..."
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
else
  echo "zsh-autosuggestions found. Skipping installation of zsh-autosuggestions..."
fi

if command -v peco > /dev/null 2>&1; then
  echo "peco found. Skipping installation of peco..."
else
  echo "peco not found. Installing peco..."
  if [ "$(uname)" = "Darwin" ]; then
    curl -fLo ~/peco.zip https://github.com/peco/peco/releases/latest/download/peco_darwin_arm64.zip
    unzip -d ~/ ~/peco.zip
    mv ~/peco_darwin_arm64/peco /usr/local/bin/
    rm ~/peco.zip
    rm -rf ~/peco_darwin_arm64
  else
    curl -fLo ~/peco.tar.gz https://github.com/peco/peco/releases/latest/download/peco_linux_amd64.tar.gz
    tar -xvzf ~/peco.tar.gz
    sudo mv peco_linux_amd64/peco /usr/local/bin
    rm ~/peco.tar.gz
    rm -rf peco_linux_amd64
  fi
fi

if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-peco-history ]; then
  echo "zsh-peco-history not found. Installing zsh-peco-history..."
  git clone https://github.com/jimeh/zsh-peco-history.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-peco-history
else
  echo "zsh-peco-history found. Skipping installation of zsh-peco-history..."
fi

echo "symlinking .zshrc_personal"
ln -nsf ~/dotfiles/.zshrc_personal ~/.zshrc_personal

# TODO: Need to detect if we've already sourced the personal zshrc before adding it.
# For now, have to source it manually.

if fc-list | grep Meslo > /dev/null 2>&1; then
  echo "Meslo font exists. Skipping installation of Meslo font..."
else
  echo "Meslo font not found. Installing Meslo font..."
  git clone https://github.com/powerline/fonts.git ~/fonts --depth=1 && \
    ~/fonts/install.sh
  rm -rf ~/fonts
fi

if infocmp alacritty > /dev/null 2>&1; then
  echo "alacritty terminfo found. Skipping installation of alacritty terminfo..."
else
  echo "alacritty terminfo not found. Installing alacritty terminfo..."
  curl https://raw.githubusercontent.com/alacritty/alacritty/master/extra/alacritty.info > ~/alacritty.info
  sudo tic -xe alacritty,alacritty-direct ~/alacritty.info
  rm ~/alacritty.info
fi

echo "symlinking alacritty"
ln -nsf ~/dotfiles/alacritty ~/.config/alacritty

NVIM_VERSION=$(nvim --version | head -n 1 | awk -F v '{print $2}')
NVIM_MINOR_VERSION=$(echo $NVIM_VERSION | awk -F . '{print $2}')
# The version # of neovim needs to be higher than 0.5 to use packer
if [ 5 -lt $NVIM_MINOR_VERSION ]; then
  echo "neovim $NVIM_VERSION found. Skipping installation of neovim..."
else
  echo "neovim not found. Installing neovim..."
  if [ $OS = "Darwin" ]; then
    brew install neovim
  else
    curl -fLo ~/nvim-linux64.tar.gz https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
    tar -xzvf ~/nvim-linux64.tar.gz -C ~/
    sudo ln -s ~/nvim-linux64/bin/nvim /usr/local/bin/
    rm ~/nvim-linux64.tar.gz
  fi
fi

echo "symlinking nvim"
ln -nsf ~/dotfiles/nvim ~/.config

if [ ! -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
  echo "packer not found. Installing packer..."
  git clone --depth 1 https://github.com/wbthomason/packer.nvim\
 ~/.local/share/nvim/site/pack/packer/start/packer.nvim
 else
   echo "packer found. Skipping installation of packer..."
fi

if [ ! -f ~/dotfiles/nvim/autoload/plug.vim ]; then
  echo "Installing vim-plug"
  curl -fLo ~/dotfiles/nvim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
else
  echo "vim-plug found. Skipping installation of vim-plug..."
fi

echo "Install vim-plug plugins"
nvim --headless +PlugInstall +qall

echo "symlinking coc"
ln -nsf ~/dotfiles/coc ~/.config

echo "symlinking tmux"
ln -nsf ~/dotfiles/.tmux.conf ~/

# This is to resolve a bug with automatic installation of TPM relying on a variable to be set.
# See https://github.com/tmux-plugins/tpm/issues/105
export TMUX_PLUGIN_MANAGER_PATH='$HOME/.tmux/plugins/'
if [ ! -d ~/.tmux/plugins/tpm ]; then
  echo "tpm not found. Installing tpm..."
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && \
    ~/.tmux/plugins/tpm/bin/install_plugins
else
  echo "tpm found. Skipping installation of tpm..."
fi
